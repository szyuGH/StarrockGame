Calculations (Structure, FuelCap, EnergyCap, ShieldCap)


Physics Engine for Movement and Collision
Movement based on force, many options for bodies
Collision based on polygons, which are generated by interpreting the texture
Bodies represent Objects in a physics world and behave based on their settings
Theoretically many possibilities due to the settings
- A ship should be handled differently by the world than a laser bullet
	-> settings differ from object type to object type
		-> instead of having a class for each type, xml templates are loaded to define the entities settings
		-> reducing number of different entity classes
		-> improving scalability
Actual parameters for body settings must be tweaked per entity type for best balance
		
Locally attached objects like engines should turn with the entity
-> transformed only when needed, since not rendered

Particles (Emitters as example for a locally attached object) are rendered and updated by the gpu with HLSL
Usually particle systems tend to update the particles on the cpu
-> cpu time is not wasted on particle updates (many particles)
-> 3d rendering transformed to 2d

AI is handled by controllers
An entity is given one controller when initialized
Controller Types are:
- NoController
- PlayerController
- DestroyerController
- HomingController
- ScavengerController
- ComplexController
The ComplexController can divide into multiple Controllers and behaviors, even not defined by above

Session has a difficulty, that will manage the type of spawning enemies, not their numbers

Structure is designed to fit the entity's size and mass
FuelCapacity will be designed, so that a ship should be able to cross the gamefield 1.5 times without interferences
EnergyCapacity is calculated, so that a ship can shoot its primary weapon 20 times and its secondary weapon 5 times
ShieldCapacity is designed to fit the mass of the entity
Since the resources must be balanced per ship type, the values could be determined by a point chart, so that each entity 
has n points it can distribute to the resources
To protect from cheating, the templates will define checksums, which can be calculated by the template
